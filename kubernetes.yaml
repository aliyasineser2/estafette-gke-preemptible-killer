apiVersion: v1
kind: Namespace
metadata:
  name: ${NAMESPACE}
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: estafette-gke-preemptible-killer
  labels:
    app: estafette-gke-preemptible-killer
rules:
- apiGroups: [""] # "" indicates the core API group
  resources:
  - nodes
  verbs:
  - delete
  - get
  - list
  - patch
  - update
- apiGroups: [""] # "" indicates the core API group
  resources:
  - pods
  verbs:
  - delete
  - get
  - list
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: estafette-gke-preemptible-killer
  labels:
    app: estafette-gke-preemptible-killer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: estafette-gke-preemptible-killer
subjects:
- kind: ServiceAccount
  name: estafette-gke-preemptible-killer
  namespace: estafette
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ${APP_NAME}
  namespace: ${NAMESPACE}
  labels:
    app: ${APP_NAME}
    team: ${TEAM_NAME}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: ${APP_NAME}
  namespace: ${NAMESPACE}
  labels:
    app: ${APP_NAME}
    team: ${TEAM_NAME}
spec:
  replicas: 1
  strategy:
    type: Recreate
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: ${APP_NAME}
  template:
    metadata:
      labels:
        app: ${APP_NAME}
        team: ${TEAM_NAME}
        version: ${VERSION}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9101"
    spec:
      serviceAccount: ${APP_NAME}
      containers:
      - name: ${APP_NAME}
        image: estafette/estafette-gke-preemptible-killer:${GO_PIPELINE_LABEL}
        env:
        - name: "GOOGLE_PROJECT_ID"
          value: "${GOOGLE_PROJECT_ID}"
        - name: "GOOGLE_INSTANCE_ZONE"
          value: "${GOOGLE_INSTANCE_ZONE}"
        - name: "NODE_POOL"
          value: "${NODE_POOL}"
        resources:
          requests:
            cpu: ${CPU_REQUEST}
            memory: ${MEMORY_REQUEST}
          limits:
            cpu: ${CPU_LIMIT}
            memory: ${MEMORY_LIMIT}
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9101
          initialDelaySeconds: 30
          timeoutSeconds: 1
        lifecycle:
          preStop:
            exec:
              command: ["curl http://localhost:8080/quit"]
